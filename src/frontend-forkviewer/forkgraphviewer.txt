@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="fork-graph-container">
    <AntDesign.Card>
        <Body>
            <Row>
                <Col Span="6">
                    <Card Title="Filters" Size="small">
                        <div class="filter-section">
                            <Text>Merit Score Range</Text>
                            <Slider Range 
                                   Min="0" 
                                   Max="100" 
                                   @bind-Value="@_meritRange"
                                   OnAfterChange="@HandleFiltersChanged" />
                            
                            <Divider />
                            
                            <Text>Time Period</Text>
                            <RangePicker 
                                @bind-Value="@_dateRange"
                                OnChange="@HandleFiltersChanged" />
                            
                            <Divider />
                            
                            <Text>Link Types</Text>
                            <CheckboxGroup 
                                Options="@_linkTypeOptions"
                                @bind-Value="@_selectedLinkTypes"
                                OnChange="@HandleFiltersChanged" />
                        </div>
                    </Card>
                    
                    <Card Title="Grouping" Size="small" Class="mt-4">
                        <RadioGroup @bind-Value="@_groupingMode" OnChange="@HandleGroupingChanged">
                            <Radio Value="@("none")">No Grouping</Radio>
                            <Radio Value="@("author")">By Author</Radio>
                            <Radio Value="@("theme")">By Theme</Radio>
                            <Radio Value="@("time")">By Time Period</Radio>
                        </RadioGroup>
                    </Card>
                    
                    <Card Title="Layout" Size="small" Class="mt-4">
                        <RadioGroup @bind-Value="@_layoutType" OnChange="@HandleLayoutChange">
                            <Radio Value="@("force")">Force</Radio>
                            <Radio Value="@("dagre")">Hierarchical</Radio>
                        </RadioGroup>
                    </Card>
                </Col>
                
                <Col Span="18">
                    <div id="@_containerId" class="fork-graph" style="width: 100%; height: 600px;"></div>
                </Col>
            </Row>
        </Body>
        <Extra>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" OnClick="@CenterView">
                        <Icon Type="compass" Theme="outline" />
                        Center View
                    </Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="@ResetFilters">
                        <Icon Type="clear" Theme="outline" />
                        Reset Filters
                    </Button>
                </SpaceItem>
                <SpaceItem>
                    <Switch 
                        Checked="@_showLegend"
                        CheckedChildren="Hide Legend"
                        UnCheckedChildren="Show Legend"
                        OnChange="@(async (checked) => { _showLegend = checked; await UpdateVisualization(); })" />
                </SpaceItem>
            </Space>
        </Extra>
    </AntDesign.Card>
</div>

@code {
    [Parameter]
    public Guid InitialPostId { get; set; }

    private readonly string _containerId = $"fork-graph-{Guid.NewGuid()}";
    private IJSObjectReference _module;
    private DotNetObjectReference<EnhancedForkGraphViewer> _dotNetRef;
    
    // Filters
    private double[] _meritRange = new[] { 0.0, 100.0 };
    private DateTimeRange? _dateRange;
    private string[] _selectedLinkTypes = new[] { "fork", "synthesis" };
    private string _groupingMode = "none";
    private string _layoutType = "force";
    private bool _showLegend = true;

    private readonly string[] _linkTypeOptions = new[] { "fork", "synthesis" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/enhancedForkGraph.js");
            _dotNetRef = DotNetObjectReference.Create(this);
            await InitializeVisualization();
        }
    }

    private async Task InitializeVisualization()
    {
        var graphData = await GetFilteredGraphData();
        
        // Set the .NET helper reference
        await JSRuntime.InvokeVoidAsync("setDotNetHelper", _dotNetRef);
        
        // Initialize the graph
        await _module.InvokeVoidAsync("initForkGraph", 
            _containerId, 
            graphData, 
            _layoutType,
            _groupingMode,
            _showLegend,
            _dotNetRef);
            
        // Register for cleanup
        await JSRuntime.InvokeVoidAsync("window.addEventListener", "beforeunload", async () => {
            await JSRuntime.InvokeVoidAsync("setDotNetHelper", null);
        });
    }

    private async Task UpdateVisualization()
    {
        var graphData = await GetFilteredGraphData();
        await _module.InvokeVoidAsync("updateVisualization",
            _containerId,
            graphData,
            _layoutType,
            _groupingMode,
            _showLegend);
    }

    private async Task HandleFiltersChanged()
    {
        await UpdateVisualization();
    }

    private async Task HandleGroupingChanged()
    {
        await UpdateVisualization();
    }

    private async Task HandleLayoutChange()
    {
        await UpdateVisualization();
    }

    private async Task ResetFilters()
    {
        _meritRange = new[] { 0.0, 100.0 };
        _dateRange = null;
        _selectedLinkTypes = new[] { "fork", "synthesis" };
        _groupingMode = "none";
        await UpdateVisualization();
    }

    private async Task<ForkGraphData> GetFilteredGraphData()
    {
        // TODO: Replace with actual service call that includes filtering
        var allData = await GetForkGraphData();
        
        // Apply filters
        var filteredNodes = allData.Nodes
            .Where(n => n.MeritScore * 100 >= _meritRange[0] && 
                       n.MeritScore * 100 <= _meritRange[1]);

        if (_dateRange.HasValue)
        {
            filteredNodes = filteredNodes.Where(n => 
                n.CreatedAt >= _dateRange.Value.Start && 
                n.CreatedAt <= _dateRange.Value.End);
        }

        var filteredNodeIds = filteredNodes.Select(n => n.Id).ToHashSet();

        var filteredLinks = allData.Links
            .Where(l => _selectedLinkTypes.Contains(l.Type))
            .Where(l => filteredNodeIds.Contains(l.Source) && 
                       filteredNodeIds.Contains(l.Target));

        return new ForkGraphData
        {
            Nodes = filteredNodes.ToList(),
            Links = filteredLinks.ToList()
        };
    }

    private async Task<ForkGraphData> GetForkGraphData()
    {
        // TODO: Replace with actual service call
        return new ForkGraphData
        {
            Nodes = new List<PostNode>
            {
                new() { 
                    Id = InitialPostId, 
                    Title = "Original Post", 
                    MeritScore = 0.85m,
                    AuthorId = Guid.NewGuid(),
                    CreatedAt = DateTime.UtcNow.AddDays(-10),
                    Theme = "AI Safety"
                },
                // Add more sample nodes...
            },
            Links = new List<ForkLink>
            {
                // Add sample links...
            }
        };
    }

    private class PostNode
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public decimal MeritScore { get; set; }
        public Guid AuthorId { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Theme { get; set; }
    }

    private class ForkLink
    {
        public Guid Source { get; set; }
        public Guid Target { get; set; }
        public string Type { get; set; }
    }

    private class ForkGraphData
    {
        public List<PostNode> Nodes { get; set; } = new();
        public List<ForkLink> Links { get; set; } = new();
    }
}