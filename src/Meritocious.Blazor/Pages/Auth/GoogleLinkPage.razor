@page "/account/linkgoogle"
@using Meritocious.Blazor.Services.Auth
@using AntDesign
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="google-link-container">
    <Card Style="width: 400px;">
        <div class="text-center mb-8">
            <h2 class="text-2xl font-bold">Link Your Google Account</h2>
            <p class="text-gray-500 mt-2">For enhanced security, your account must be linked to Google</p>
        </div>

        <div class="mb-6">
            <Alert
                Type="AlertType.Info"
                Message="Why do I need to link my Google account?"
                Description="Linking your Google account helps us maintain a high level of trust in our community and protect your account with Google's security features."
                ShowIcon="true" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <Alert
                Type="AlertType.Error"
                Message="@errorMessage"
                ShowIcon="true"
                Banner
                Class="mb-4" />
        }

        <Button Type="ButtonType.Primary"
                Block
                OnClick="HandleGoogleLink"
                Loading="@isLoading">
            <Space>
                <Icon Type="google" Theme="IconThemeType.Outline" />
                <span>Link Google Account</span>
            </Space>
        </Button>
    </Card>
</div>

<style>
    .google-link-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f0f2f5;
    }
</style>

@code {
    private bool isLoading;
    private string? errorMessage;
    private string? returnUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param[0];
        }
    }

    private async Task HandleGoogleLink()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Initialize Google Sign-In
            var idToken = await JSRuntime.InvokeAsync<string>("initializeGoogleSignIn");
            
            if (!string.IsNullOrEmpty(idToken))
            {
                var result = await AuthService.LinkGoogleAccountAsync(idToken);
                if (result.Success)
                {
                    var url = string.IsNullOrEmpty(returnUrl) ? "/" : returnUrl;
                    NavigationManager.NavigateTo(url);
                }
                else
                {
                    errorMessage = result.Error ?? "Failed to link Google account";
                }
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while linking Google account";
        }
        finally
        {
            isLoading = false;
        }
    }
}