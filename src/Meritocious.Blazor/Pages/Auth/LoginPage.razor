@page "/login"
@using Meritocious.Blazor.Pages.Auth.Components
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="login-container">
    <Card Style="width: 400px;">
        @if (_requires2FA)
        {
            <TwoFactorVerificationComponent 
                Error="@errorMessage"
                OnVerificationComplete="HandleTwoFactorVerification" />
        }
        else
        {
            <div class="text-center mb-8">
                <h2 class="text-2xl font-bold">Welcome to Meritocious</h2>
                <p class="text-gray-500">Where ideas rise on merit</p>
            </div>

            <Form @ref="loginForm" 
                Model="@loginModel"
                  OnFinish="HandleLogin"
                  Layout="FormLayout.Vertical">
                <FormItem Label="Email">
                    <Input @bind-Value="@context.Email" 
                           Placeholder="Enter your email" />
                </FormItem>

                <FormItem Label="Password">
                    <InputPassword @bind-Value="@context.Password"
                                 Placeholder="Enter your password" />
                </FormItem>

                <FormItem>
                    <Button Type="ButtonType.Primary"
                            HtmlType="submit"
                            Block
                            Loading="@isLoading">
                        Log In
                    </Button>
                </FormItem>

                <Divider>Or</Divider>

                <Button Type="ButtonType.Default"
                        Block
                        OnClick="HandleGoogleLogin"
                        Loading="@isGoogleLoading">
                    <Space>
                        <Icon Type="google" Theme="IconThemeType.Outline" />
                        <span>Continue with Google</span>
                    </Space>
                </Button>
            </Form>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <Alert Type="AlertType.Error"
                       Message="@errorMessage"
                       ShowIcon="true"
                       Banner
                       Class="mt-4" />
            }

            <div class="mt-4 text-center">
                <a href="/register">Don't have an account? Sign up</a>
            </div>
        }
    </Card>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f0f2f5;
    }
</style>

@code {
    private LoginRequest loginModel = new();
    private bool isLoading;
    private bool isGoogleLoading;
    private string? errorMessage;
    private string? returnUrl;
    private bool _requires2FA;
    private bool _isLoginSuccessful;

    AntDesign.Form<LoginRequest> loginForm;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param[0];
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var result = await AuthService.LoginAsync(loginModel);
            _isLoginSuccessful = result.Success;

            if (result.Success)
            {
                var requires2FA = await AuthService.RequiresTwoFactorAsync();
                if (requires2FA)
                {
                    _requires2FA = true;
                }
                else
                {
                    NavigateToReturnUrl();
                }
            }
            else
            {
                errorMessage = result.Error ?? "Login failed";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleGoogleLogin()
    {
        try
        {
            isGoogleLoading = true;
            errorMessage = null;

            // Initialize Google Sign-In
            var idToken = await JSRuntime.InvokeAsync<string>("initializeGoogleSignIn");
            
            if (!string.IsNullOrEmpty(idToken))
            {
                var result = await AuthService.GoogleLoginAsync(idToken);
                _isLoginSuccessful = result.Success;

                if (result.Success)
                {
                    if (result.RequiresGoogleLink)
                    {
                        NavigationManager.NavigateTo($"/account/linkgoogle?returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}");
                        return;
                    }

                    var requires2FA = await AuthService.RequiresTwoFactorAsync();
                    if (requires2FA)
                    {
                        _requires2FA = true;
                    }
                    else
                    {
                        NavigateToReturnUrl();
                    }
                }
                else
                {
                    errorMessage = result.Error ?? "Google login failed";
                }
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred during Google login";
        }
        finally
        {
            isGoogleLoading = false;
        }
    }

    private async Task HandleTwoFactorVerification(bool isValid)
    {
        if (isValid)
        {
            NavigateToReturnUrl();
        }
        else
        {
            errorMessage = "Invalid verification code. Please try again.";
        }
    }

    private void NavigateToReturnUrl()
    {
        var url = string.IsNullOrEmpty(returnUrl) ? "/" : Uri.UnescapeDataString(returnUrl);
        NavigationManager.NavigateTo(url);
    }
}