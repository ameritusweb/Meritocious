@namespace Meritocious.Web.Components.Auth

<div class="password-strength">
    <Progress Percent="@strengthPercent"
              Status="@strengthStatus"
              ShowInfo="false"
              Size="small" />
    <div class="flex justify-between text-xs mt-1">
        <span class="@GetStrengthClass()">@strengthText</span>
        <span>
            @foreach (var check in checks)
            {
                <Tooltip Title="@check.Description">
                    <Icon Type="@(check.IsMet ? "check-circle" : "exclamation-circle")"
                          Class="@(check.IsMet ? "text-green-500" : "text-gray-300")"
                          Theme="fill" />
                </Tooltip>
            }
        </span>
    </div>
</div>

@code {
    [Parameter] public string Password { get; set; } = "";

    private List<PasswordCheck> checks = new()
    {
        new("At least 8 characters", p => p.Length >= 8),
        new("Contains uppercase letter", p => p.Any(char.IsUpper)),
        new("Contains lowercase letter", p => p.Any(char.IsLower)),
        new("Contains number", p => p.Any(char.IsDigit)),
        new("Contains special character", p => p.Any(c => !char.IsLetterOrDigit(c)))
    };

    private int strengthPercent => GetStrengthPercent();
    private ProgressStatus strengthStatus => GetStrengthStatus();
    private string strengthText => GetStrengthText();

    private int GetStrengthPercent()
    {
        if (string.IsNullOrEmpty(Password)) return 0;
        return checks.Count(c => c.IsMet(Password)) * 20;
    }

    private ProgressStatus GetStrengthStatus()
    {
        return strengthPercent switch
        {
            >= 80 => ProgressStatus.Success,
            >= 60 => ProgressStatus.Normal,
            >= 40 => ProgressStatus.Active,
            > 0 => ProgressStatus.Exception,
            _ => ProgressStatus.Normal
        };
    }

    private string GetStrengthText()
    {
        return strengthPercent switch
        {
            >= 80 => "Strong",
            >= 60 => "Good",
            >= 40 => "Fair",
            > 0 => "Weak",
            _ => "Enter password"
        };
    }

    private string GetStrengthClass()
    {
        return strengthPercent switch
        {
            >= 80 => "text-green-500",
            >= 60 => "text-blue-500",
            >= 40 => "text-orange-500",
            > 0 => "text-red-500",
            _ => "text-gray-500"
        };
    }

    private class PasswordCheck
    {
        public string Description { get; }
        public Func<string, bool> Validator { get; }
        public bool IsMet(string password) => Validator(password);

        public PasswordCheck(string description, Func<string, bool> validator)
        {
            Description = description;
            Validator = validator;
        }
    }
}