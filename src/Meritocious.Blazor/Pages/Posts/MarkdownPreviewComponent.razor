@namespace Meritocious.Blazor.Pages.Posts
@using System.Text.RegularExpressions

<div class="markdown-preview">
    @((MarkupString)RenderMarkdown(Content))
</div>

<style>
    .markdown-preview h1 {
        font-size: 1.75rem;
        font-weight: 600;
        margin: 1.5rem 0 1rem 0;
    }
    
    .markdown-preview h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 1.25rem 0 0.75rem 0;
    }
    
    .markdown-preview h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 1rem 0 0.5rem 0;
    }
    
    .markdown-preview p {
        margin: 0.75rem 0;
        line-height: 1.6;
    }
    
    .markdown-preview ul, .markdown-preview ol {
        margin: 0.75rem 0;
        padding-left: 1.5rem;
    }
    
    .markdown-preview blockquote {
        border-left: 4px solid #d1d5db;
        padding-left: 1rem;
        margin: 1rem 0;
        color: #4b5563;
    }
    
    .markdown-preview pre {
        background-color: #f3f4f6;
        padding: 1rem;
        border-radius: 0.375rem;
        overflow-x: auto;
        margin: 1rem 0;
    }
    
    .markdown-preview code {
        background-color: #f3f4f6;
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-family: monospace;
    }
    
    .markdown-preview a {
        color: #2563eb;
        text-decoration: underline;
    }
</style>

@code {
    [Parameter] public string Content { get; set; } = string.Empty;
    
    private string RenderMarkdown(string markdown)
    {
        if (string.IsNullOrWhiteSpace(markdown))
        {
            return string.Empty;
        }
        
        // TODO: Use a proper Markdown parser like Markdig in production
        // This is a simplified implementation for demo purposes
        var html = markdown;
        
        // Headers
        html = Regex.Replace(html, @"^##\s+(.+)$", "<h2>$1</h2>", RegexOptions.Multiline);
        html = Regex.Replace(html, @"^###\s+(.+)$", "<h3>$1</h3>", RegexOptions.Multiline);
        
        // Bold
        html = Regex.Replace(html, @"\*\*(.+?)\*\*", "<strong>$1</strong>");
        
        // Italic
        html = Regex.Replace(html, @"\*(.+?)\*", "<em>$1</em>");
        
        // Links
        html = Regex.Replace(html, @"\[(.+?)\]\((.+?)\)", "<a href=\"$2\">$1</a>");
        
        // Blockquotes
        html = Regex.Replace(html, @"^>\s+(.+)$", "<blockquote>$1</blockquote>", RegexOptions.Multiline);
        
        // Unordered lists
        html = Regex.Replace(html, @"^-\s+(.+)$", "<li>$1</li>", RegexOptions.Multiline);
        html = Regex.Replace(html, @"(<li>.+</li>\n)+", "<ul>$0</ul>");
        
        // Ordered lists
        html = Regex.Replace(html, @"^\d+\.\s+(.+)$", "<li>$1</li>", RegexOptions.Multiline);
        html = Regex.Replace(html, @"(<li>.+</li>\n)+", "<ol>$0</ol>");
        
        // Code blocks
        html = Regex.Replace(html, @"```([\s\S]*?)```", "<pre><code>$1</code></pre>");
        
        // Inline code
        html = Regex.Replace(html, @"`(.+?)`", "<code>$1</code>");
        
        // Paragraphs (only if not already in a block element)
        html = Regex.Replace(html, @"^(?!<[hou]|<li|<pre|<blockquote)(.+)$", "<p>$1</p>", RegexOptions.Multiline);
        
        return html;
    }
}