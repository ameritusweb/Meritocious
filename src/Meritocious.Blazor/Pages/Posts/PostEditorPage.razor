@page "/s/{SubstackSlug}/new"
@page "/s/{SubstackSlug}/edit/{PostId}"
@using Meritocious.Blazor.Services.Forms
@inject IPostService PostService
@inject NavigationManager NavigationManager
@inject MessageService MessageService
@inject IJSRuntime JSRuntime
@inject ISubstackService SubstackService
@inject IFormStatusService FormStatus

<PageHeader
    Title="@(isEditing ? "Edit Post" : "Create Post")"
    Subtitle="@SubstackSlug"
    OnBack="NavigateBack"
    Extra="@(
        <Space>
            <Button OnClick="HandleSaveDraft" Loading="@FormStatus.IsLoading">
                Save Draft
            </Button>
            <Button Type="primary" OnClick="HandleSubmit" Loading="@FormStatus.IsLoading" Disabled="!IsValid">
                @(isEditing ? "Update" : "Publish")
            </Button>
        </Space>
    )">
</PageHeader>

<div class="flex space-x-6">
    <div class="w-2/3">
        <Card>
            <BaseFormComponent TModel="PostModel"
                             Model="@model"
                             OnSubmit="HandleSubmit">
                <FormItem Label="Title" Required>
                    <Input @bind-Value="@model.Title" 
                          Placeholder="Enter a descriptive title"
                          MaxLength="200" 
                          ShowCount
                          Size="large" />
                    @if (FormStatus.FieldErrors.ContainsKey("title"))
                    {
                        <small class="text-red-500">@FormStatus.FieldErrors["title"].First()</small>
                    }
                </FormItem>

                <FormItem Label="Content" Required>
                    <div class="editor-container border rounded">
                        <MarkdownToolbarComponent OnInsertLink="HandleInsertLink" />
                        
                        <TextArea @bind-Value="@model.Content"
                                Placeholder="Write your post content here. Use the formatting tools above to structure your post."
                                OnChange="HandleContentChange"
                                Class="border-none"
                                Rows="12" />
                                
                        <WordCountComponent Content="@model.Content" @ref="wordCounter" />
                    </div>
                    @if (FormStatus.FieldErrors.ContainsKey("content"))
                    {
                        <small class="text-red-500">@FormStatus.FieldErrors["content"].First()</small>
                    }
                </FormItem>
            </BaseFormComponent>
        </Card>
    </div>

    <div class="w-1/3 space-y-4">
        <Card Title="Post Settings">
            <BaseFormComponent TModel="PostModel"
                             Model="@model">
                <FormItem Label="Tags">
                    <TagSelectorComponent Tags="@model.Tags"
                                        AvailableTags="@availableTags"
                                        Placeholder="Add up to 5 tags"
                                        MaxTags="5"
                                        TagsChanged="HandleTagsChanged" />
                    @if (FormStatus.FieldErrors.ContainsKey("tags"))
                    {
                        <small class="text-red-500">@FormStatus.FieldErrors["tags"].First()</small>
                    }
                </FormItem>

                <FormItem Label="Visibility">
                    <RadioGroup @bind-Value="@model.Visibility">
                        <Radio Value="@VisibilityLevel.Public">
                            <div>
                                <div>Public</div>
                                <div class="text-sm text-gray-500">
                                    Anyone can view this post
                                </div>
                            </div>
                        </Radio>
                        <Radio Value="@VisibilityLevel.Friends">
                            <div>
                                <div>Friends Only</div>
                                <div class="text-sm text-gray-500">
                                    Only your friends can view this post
                                </div>
                            </div>
                        </Radio>
                        <Radio Value="@VisibilityLevel.Private">
                            <div>
                                <div>Private</div>
                                <div class="text-sm text-gray-500">
                                    Only you can view this post
                                </div>
                            </div>
                        </Radio>
                    </RadioGroup>
                </FormItem>

                @if (isEditing && model.IsFork)
                {
                    <FormItem Label="Fork Settings">
                        <Alert Message="This is a forked post"
                              Type="info"
                              ShowIcon />
                        <div class="mt-2">
                            <a href="@($"/s/{originalPost?.SubstackSlug}/{originalPost?.Id}")">
                                View Original Post
                            </a>
                        </div>
                    </FormItem>
                }

                @if (ShowVersionHistory)
                {
                    <FormItem Label="Version Notes (optional)">
                        <Input @bind-Value="@versionNotes" 
                              Placeholder="Briefly describe what changed in this update"
                              MaxLength="100" 
                              ShowCount />
                    </FormItem>
                }
            </BaseFormComponent>
        </Card>

        <Card Title="AI Analysis" Loading="@isAnalyzing">
            @if (analysis != null)
            {
                <div class="space-y-4">
                    <div>
                        <div class="flex justify-between text-sm mb-1">
                            <span>Estimated Merit Score</span>
                            <span class="font-medium">@analysis.EstimatedMeritScore.ToString("N2")</span>
                        </div>
                        <Progress Percent="@((double)(analysis.EstimatedMeritScore * 100))"
                                StrokeColor="@GetMeritColor(analysis.EstimatedMeritScore)" />
                    </div>

                    @foreach (var metric in analysis.Metrics)
                    {
                        <div>
                            <div class="flex justify-between text-sm mb-1">
                                <span>@metric.Key</span>
                                <span>@metric.Value.ToString("N2")</span>
                            </div>
                            <Progress Percent="@((double)(metric.Value * 100))"
                                    ShowInfo="false"
                                    Size="small" />
                        </div>
                    }

                    @if (analysis.Suggestions.Any())
                    {
                        <Divider />
                        <div>
                            <h4 class="font-medium mb-2">Suggestions</h4>
                            <ul class="space-y-2">
                                @foreach (var suggestion in analysis.Suggestions)
                                {
                                    <li class="flex items-start">
                                        <Icon Type="info-circle" 
                                             Class="text-blue-500 mt-1 mr-2" />
                                        <span>@suggestion</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        </Card>
    </div>
</div>

<PostPreviewComponent Visible="@isPreviewVisible"
                      Post="@model"
                      ReadTime="@(wordCounter?.EstimatedReadTime ?? 1)"
                      OnClose="ClosePreview" />

<style>
    .editor-container {
        display: flex;
        flex-direction: column;
    }
    
    .editor-container .ant-input {
        border-radius: 0;
    }
</style>

@code {
    [Parameter] public string SubstackSlug { get; set; } = "";
    [Parameter] public string? PostId { get; set; }

    private bool isEditing => !string.IsNullOrEmpty(PostId);
    private bool isSubmitting;
    private bool isSavingDraft;
    private bool isAnalyzing;
    private bool isPreviewVisible;
    private bool ShowVersionHistory => isEditing;
    
    private PostDto? originalPost;
    private PostModel model = new();
    private List<string> availableTags = new();
    private PostAnalysis? analysis;
    private System.Timers.Timer? analysisDebounceTimer;
    private WordCountComponent wordCounter;
    private string versionNotes = string.Empty;
    
    private bool IsValid => !string.IsNullOrWhiteSpace(model.Title) && 
                        !string.IsNullOrWhiteSpace(model.Content);

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableTags();

        if (isEditing)
        {
            await LoadPost();
        }

        // Set up content analysis timer
        analysisDebounceTimer = new System.Timers.Timer(1000);
        analysisDebounceTimer.Elapsed += async (sender, e) => await AnalyzeContent();
        analysisDebounceTimer.AutoReset = false;
    }

    private async Task LoadAvailableTags()
    {
        availableTags = await PostService.GetAvailableTagsAsync(SubstackSlug);
    }

    private async Task LoadPost()
    {
        try
        {
            var post = await PostService.GetPostAsync(SubstackSlug, PostId!);
            
            model = new PostModel
            {
                Title = post.Title,
                Content = post.Content,
                Tags = post.Tags,
                Visibility = post.Visibility,
                IsFork = post.IsFork
            };

            if (post.IsFork)
            {
                originalPost = await PostService.GetOriginalPostAsync(PostId!);
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error("Failed to load post");
            NavigateBack();
        }
    }

    private void HandleContentChange(string value)
    {
        model.Content = value;
        analysisDebounceTimer?.Stop();
        analysisDebounceTimer?.Start();
    }
    
    private async Task HandleInsertLink(MarkdownToolbarComponent.LinkInfo linkInfo)
    {
        if (!string.IsNullOrWhiteSpace(linkInfo.Url))
        {
            var markdown = $"[{linkInfo.Text}]({linkInfo.Url})";
            await JSRuntime.InvokeVoidAsync("insertTextAtSelection", markdown);
        }
    }
    
    private void HandleTagsChanged(List<string> tags)
    {
        model.Tags = tags;
    }

    private async Task HandleSubmit()
    {
        await SavePost(isDraft: false);
    }

    private async Task HandleSaveDraft()
    {
        await SavePost(isDraft: true);
    }

    private async Task SavePost(bool isDraft)
    {
        if (!IsValid) return;
        
        try
        {
            if (isDraft)
                isSavingDraft = true;
            else
                isSubmitting = true;

            if (isEditing)
            {
                await PostService.UpdatePostAsync(SubstackSlug, PostId!, new UpdatePostRequest
                {
                    Title = model.Title,
                    Content = model.Content,
                    Tags = model.Tags,
                    Visibility = model.Visibility,
                    IsDraft = isDraft,
                    VersionNotes = versionNotes
                });
            }
            else
            {
                var postId = await PostService.CreatePostAsync(SubstackSlug, new CreatePostRequest
                {
                    Title = model.Title,
                    Content = model.Content,
                    Tags = model.Tags,
                    Visibility = model.Visibility,
                    IsDraft = isDraft
                });

                PostId = postId;
            }

            await MessageService.Success(isDraft ? "Draft saved" : "Post published");

            if (!isDraft)
            {
                NavigationManager.NavigateTo($"/s/{SubstackSlug}/{PostId}");
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error(isDraft ? "Failed to save draft" : "Failed to publish post");
        }
        finally
        {
            isSavingDraft = false;
            isSubmitting = false;
        }
    }

    private async Task AnalyzeContent()
    {
        if (string.IsNullOrWhiteSpace(model.Content))
            return;

        try
        {
            isAnalyzing = true;
            analysis = await PostService.AnalyzePostAsync(new AnalyzePostRequest
            {
                Title = model.Title,
                Content = model.Content,
                Tags = model.Tags
            });
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private string GetMeritColor(decimal score)
    {
        return score switch
        {
            >= 0.8m => "#52c41a",
            >= 0.6m => "#1890ff",
            >= 0.4m => "#faad14",
            _ => "#ff4d4f"
        };
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/s/{SubstackSlug}");
    }

    public void Dispose()
    {
        analysisDebounceTimer?.Dispose();
    }
}