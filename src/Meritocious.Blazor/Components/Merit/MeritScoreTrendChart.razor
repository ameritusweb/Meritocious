@using Meritocious.Common.DTOs.Merit
@using Meritocious.Core.Entities
@using AntDesign.Charts
@using Title = AntDesign.Charts.Title
@inject IHttpClientFactory HttpClientFactory

<div class="merit-trend-chart">
    @if (ChartData != null)
    {
        <AntDesign.Charts.Line @ref="chart" Data="chartItems" Config="config" />
    }
    else
    {
        <Spin Tip="Loading merit score history..." />
    }
</div>

@code {
    [Parameter] public Guid UserId { get; set; }
    [Parameter] public string TimeFrame { get; set; } = "monthly";
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public DateTime? EndDate { get; set; }

    private IChartComponent chart;
    private List<ReputationSnapshot> ChartData;
    private List<object> chartItems = new();

    private readonly LineConfig config = new()
    {
        Title = new Title
        {
            Visible = true,
            Text = "Merit Score Trend"
        },
        Description = new Description
        {
            Visible = true,
            Text = "Track the evolution of merit scores across different dimensions"
        },
        ForceFit = true,
        Padding = "auto",
        XField = "date",
        YField = "value",
        SeriesField = "category",
        Color = new[] { "#4CAF50", "#2196F3", "#FF9800", "#F44336", "#9C27B0", "#795548" },
        Point = new LineViewConfigPoint
        {
            Visible = true,
            Size = 5,
            Shape = "circle",
            Style = new GraphicStyle
            {
                Fill = "white",
                LineWidth = 2
            }
        },
        Label = new Label
        {
            Visible = false
        },
        Smooth = true,
        Legend = new Legend
        {
            Visible = true,
            Position = "top-right"
        },
        YAxis = new ValueAxis
        {
            Min = 0,
            Max = 100,
            Label = new BaseAxisLabel
            {
                Formatter = "value => `${value}%`"
            }
        },
        Interactions = new[] 
        {
            new Interaction { Type = "slider", Cfg = new { start = 0, end = 1 } },
            new Interaction { Type = "tooltip", Cfg = new { shared = true } }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        StartDate ??= DateTime.UtcNow.AddMonths(-6);
        EndDate ??= DateTime.UtcNow;
        
        await LoadChartData();
    }

    private async Task LoadChartData()
    {
        var client = HttpClientFactory.CreateClient("MeritociousAPI");
        ChartData = await client.GetFromJsonAsync<List<ReputationSnapshot>>(
            $"api/users/{UserId}/merit-history?timeFrame={TimeFrame}&start={StartDate:yyyy-MM-dd}&end={EndDate:yyyy-MM-dd}");

        if (ChartData != null)
        {
            var items = new List<object>();
            
            foreach (var snapshot in ChartData)
            {
                // Overall Merit
                items.Add(new { 
                    date = snapshot.StartDate.ToString("MMM dd"),
                    category = "Overall Merit",
                    value = snapshot.OverallMeritScore
                });

                // Individual metrics
                foreach (var metric in snapshot.MetricSnapshots)
                {
                    items.Add(new {
                        date = snapshot.StartDate.ToString("MMM dd"),
                        category = metric.Key,
                        value = metric.Value
                    });
                }
            }

            chartItems = items;
            await InvokeAsync(StateHasChanged);

            if (chart != null)
            {
                await chart.ChangeData(chartItems);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadChartData();
    }
}