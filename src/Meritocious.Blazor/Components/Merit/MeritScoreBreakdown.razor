@namespace Meritocious.Blazor.Components.Merit
@using Meritocious.Common.DTOs.Merit

<div class="merit-score-breakdown @SizeClass">
    <div class="score-overview">
        <div class="text-center mb-3">
            <Progress Type="circle" 
                      Percent="@((double)(Score * 100))" 
                      Status="@GetProgressStatus()"
                      Format="@(percent => $"{percent:F0}")"/>
        </div>
        
        <Descriptions Size="small" Layout="Descriptions.DescriptionsLayout.Vertical" Column="1">
            <DescriptionsItem Title="Final Score">@FormatScore(Score)</DescriptionsItem>
            <DescriptionsItem Title="Scoring Model">@(Components?.ModelVersion ?? "v1.0.0")</DescriptionsItem>
            <DescriptionsItem Title="Last Evaluated">
                <span>@(LastEvaluated?.ToString("g") ?? "N/A")</span>
            </DescriptionsItem>
        </Descriptions>
    </div>
    
    <Divider>Score Components</Divider>
    
    <div class="mb-3">
        <div class="flex justify-between mb-1">
            <span>Clarity (25%):</span>
            <span>@FormatScore(Components?.ClarityScore ?? 0)</span>
        </div>
        <Progress Percent="@((double)((Components?.ClarityScore ?? 0) * 100))" 
                  Size="small" 
                  Status="@GetComponentStatus(Components?.ClarityScore ?? 0)" />
        <div class="text-xs text-gray-500 mt-1">
            Semantic coherence, readability, and structure
        </div>
    </div>
    
    <div class="mb-3">
        <div class="flex justify-between mb-1">
            <span>Novelty (25%):</span>
            <span>@FormatScore(Components?.NoveltyScore ?? 0)</span>
        </div>
        <Progress Percent="@((double)((Components?.NoveltyScore ?? 0) * 100))" 
                  Size="small" 
                  Status="@GetComponentStatus(Components?.NoveltyScore ?? 0)" />
        <div class="text-xs text-gray-500 mt-1">
            Semantic divergence from nearby posts
        </div>
    </div>
    
    <div class="mb-3">
        <div class="flex justify-between mb-1">
            <span>Contribution (20%):</span>
            <span>@FormatScore(Components?.ContributionScore ?? 0)</span>
        </div>
        <Progress Percent="@((double)((Components?.ContributionScore ?? 0) * 100))" 
                  Size="small" 
                  Status="@GetComponentStatus(Components?.ContributionScore ?? 0)" />
        <div class="text-xs text-gray-500 mt-1">
            Moves the discussion forward, refines ideas
        </div>
    </div>
    
    <div class="mb-3">
        <div class="flex justify-between mb-1">
            <span>Civility (15%):</span>
            <span>@FormatScore(Components?.CivilityScore ?? 0)</span>
        </div>
        <Progress Percent="@((double)((Components?.CivilityScore ?? 0) * 100))" 
                  Size="small" 
                  Status="@GetComponentStatus(Components?.CivilityScore ?? 0)" />
        <div class="text-xs text-gray-500 mt-1">
            Tone, respectfulness, and non-toxic language
        </div>
    </div>
    
    <div class="mb-3">
        <div class="flex justify-between mb-1">
            <span>Relevance (15%):</span>
            <span>@FormatScore(Components?.RelevanceScore ?? 0)</span>
        </div>
        <Progress Percent="@((double)((Components?.RelevanceScore ?? 0) * 100))" 
                  Size="small" 
                  Status="@GetComponentStatus(Components?.RelevanceScore ?? 0)" />
        <div class="text-xs text-gray-500 mt-1">
            Connection to thread or topic context
        </div>
    </div>
    
    @if (ShowExplanations && HasExplanations)
    {
        <Divider>Explanations</Divider>
        <Collapse AccordionBordered>
            @foreach (var explanation in Components?.Explanations ?? new Dictionary<string, string>())
            {
                <Panel Header="@GetExplanationTitle(explanation.Key)" Key="@explanation.Key">
                    <p>@explanation.Value</p>
                </Panel>
            }
        </Collapse>
    }
    
    @if (ShowLearnMoreLink)
    {
        <div class="mt-4">
            <Button Type="link" OnClick="HandleLearnMore">
                Learn more about Merit Scoring
            </Button>
        </div>
    }
</div>

@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    
    [Parameter] public decimal Score { get; set; }
    [Parameter] public MeritScoreDto Components { get; set; }
    [Parameter] public DateTime? LastEvaluated { get; set; }
    [Parameter] public bool ShowExplanations { get; set; } = true;
    [Parameter] public bool ShowLearnMoreLink { get; set; } = true;
    [Parameter] public string Size { get; set; } = "medium";
    
    private bool HasExplanations => Components?.Explanations?.Any() ?? false;
    
    private string SizeClass => Size.ToLower() switch {
        "small" => "small",
        "large" => "large",
        _ => "medium"
    };
    
    private string GetProgressStatus()
    {
        return Score switch {
            >= 0.80m => "success",
            >= 0.60m => "normal",
            >= 0.30m => "exception",
            _ => "exception"
        };
    }
    
    private string GetComponentStatus(decimal componentScore)
    {
        return componentScore switch {
            >= 0.80m => "success",
            >= 0.60m => "normal",
            >= 0.30m => "exception",
            _ => "exception"
        };
    }
    
    private string GetExplanationTitle(string key)
    {
        return key.ToLower() switch {
            "clarity" => "Clarity Score Explanation",
            "novelty" => "Novelty Score Explanation",
            "contribution" => "Contribution Score Explanation",
            "civility" => "Civility Score Explanation",
            "relevance" => "Relevance Score Explanation",
            _ => key
        };
    }
    
    private string FormatScore(decimal score)
    {
        return (score * 100).ToString("F0");
    }
    
    private void HandleLearnMore()
    {
        NavigationManager.NavigateTo("/docs/merit-scoring");
    }
}