// <auto-generated />
using System;
using Meritocious.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meritocious.Web.Migrations
{
    [DbContext(typeof(MeritociousDbContext))]
    [Migration("20250406080440_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContentTopicSubstack", b =>
                {
                    b.Property<string>("SubstacksUlidId")
                        .HasColumnType("varchar(26)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubstacksUlidId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SubstackTopics", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.AdminActionLog", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdminUserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("Action");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("Category");

                    b.HasIndex("Timestamp");

                    b.ToTable("AdminActionLogs");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ApiUsageLog", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RequestMetadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResponseSize")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("Endpoint");

                    b.HasIndex("StatusCode");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ApiUsageLogs");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.BlockedIpAddress", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlockedByUserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("BlockedAt");

                    b.HasIndex("BlockedByUserId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IpAddress")
                        .IsUnique();

                    b.ToTable("BlockedIpAddresses");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Comment", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MeritScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("ParentCommentId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentModerationEvent", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ActionId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModeratedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("ActionId")
                        .IsUnique();

                    b.HasIndex("ModeratedAt");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("ContentModerationEvents");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentReport", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModeratorId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("ResolvedAt");

                    b.HasIndex("Status");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("ContentReports");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentSimilarity", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content1UlidId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Content2UlidId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ContentId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentId2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedsUpdate")
                        .HasColumnType("bit");

                    b.Property<decimal>("SimilarityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UpdatePriority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("Content1UlidId");

                    b.HasIndex("Content2UlidId");

                    b.ToTable("ContentSimilarities");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentVersion", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EditType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<bool>("IsModerationEdit")
                        .HasColumnType("bit");

                    b.Property<decimal>("MeritScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("MeritScoreComponents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeratorNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostUlidId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("UlidId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EditorId");

                    b.HasIndex("PostUlidId");

                    b.HasIndex("ContentId", "ContentType", "VersionNumber");

                    b.ToTable("ContentVersions");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ExternalLogin", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("Email");

                    b.HasIndex("LastLoginAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.LoginAttempt", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AuthMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UlidId");

                    b.HasIndex("IpAddress");

                    b.HasIndex("IsSuspicious");

                    b.HasIndex("Success");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Username");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScore", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Score")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ScoreTypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("Score");

                    b.HasIndex("ScoreTypeId");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("MeritScore");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScoreHistory", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRecalculation")
                        .HasColumnType("bit");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecalculationReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Score")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("EvaluatedAt");

                    b.HasIndex("ModelVersion");

                    b.HasIndex("UserId");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("MeritScoreHistory");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScoreType", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UlidId");

                    b.ToTable("MeritScoreTypes");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationAction", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppealId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutomatedAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ModeratorNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NewState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreviousState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedById")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToxicityScores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("Outcome");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("Severity");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("ModerationActions");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationActionEffect", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReverted")
                        .HasColumnType("bit");

                    b.Property<string>("ModerationActionId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("RevertReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EffectType");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsReverted");

                    b.HasIndex("ModerationActionId");

                    b.ToTable("ModerationEffects");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationAppeal", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AdditionalContext")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppealerId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModerationActionId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ReviewerNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("AppealerId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ModerationActionId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("Status");

                    b.ToTable("ModerationAppeals");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Note", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<decimal>("Confidence")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("RelatedSourceIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("IsApplied");

                    b.HasIndex("PostId");

                    b.HasIndex("Type");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Notification", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("PostId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CreatedAt");

                    b.HasIndex("UserId", "IsRead");

                    b.HasIndex("UserId", "Type");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Post", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<decimal>("AverageTimeSpentSeconds")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngagementScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("MeritComponents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPostId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPostUlidId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubstackId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("SynthesisMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentPostUlidId");

                    b.HasIndex("SubstackId");

                    b.HasIndex("AuthorId", "IsDeleted");

                    b.HasIndex("IsDeleted", "CreatedAt");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostEngagement", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<decimal>("AverageTimeSpentSeconds")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("BounceRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CitationCount")
                        .HasColumnType("int");

                    b.Property<int>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ContributorCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngagementVelocity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Forks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("PeakEngagementTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostUlidId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<int>("ReferenceCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SentimentScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Shares")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SourceInfluenceScores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopEngagementSources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewTrend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ViewsByPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewsByRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlidId");

                    b.HasIndex("EngagementVelocity");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.HasIndex("PostUlidId");

                    b.HasIndex("Views");

                    b.ToTable("PostEngagement");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostRelation", b =>
                {
                    b.Property<string>("ParentId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ChildId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RelevanceScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId", "OrderIndex")
                        .HasFilter("RelationType = 'remix'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ChildId", "OrderIndex"), new[] { "ParentId", "Role" });

                    b.HasIndex("ChildId", "RelationType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ChildId", "RelationType"), new[] { "Role", "OrderIndex" });

                    b.HasIndex("ParentId", "RelationType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ParentId", "RelationType"), new[] { "Role", "OrderIndex" });

                    b.HasIndex("RelationType", "CreatedAt");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("RelationType", "CreatedAt"), new[] { "ParentId", "ChildId" });

                    b.HasIndex("RelationType", "RelevanceScore")
                        .HasFilter("RelationType = 'remix'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("RelationType", "RelevanceScore"), new[] { "Role" });

                    b.HasIndex("ChildId", "RelationType", "OrderIndex")
                        .HasFilter("RelationType = 'remix'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ChildId", "RelationType", "OrderIndex"), new[] { "Role", "RelevanceScore" });

                    b.HasIndex("ParentId", "ChildId", "RelationType")
                        .IsUnique();

                    b.HasIndex("RelationType", "Role", "OrderIndex")
                        .HasFilter("RelationType = 'remix'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("RelationType", "Role", "OrderIndex"), new[] { "ParentId", "ChildId" });

                    b.ToTable("PostRelations", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("TagId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.QuoteLocation", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndPosition")
                        .HasColumnType("int");

                    b.Property<string>("PostRelationChildId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("PostRelationParentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("PostSourceId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<int>("StartPosition")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("PostSourceId");

                    b.HasIndex("PostRelationParentId", "PostRelationChildId");

                    b.ToTable("QuoteLocations");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ReputationBadge", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AwardReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AwardedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("BadgeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("AwardedAt");

                    b.HasIndex("Category");

                    b.HasIndex("UserId", "BadgeType", "Level")
                        .IsUnique();

                    b.ToTable("ReputationBadges");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ReputationSnapshot", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetricSnapshots")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverallMeritScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeFrame")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("EndDate");

                    b.HasIndex("Level");

                    b.HasIndex("UserId", "TimeFrame", "StartDate");

                    b.ToTable("ReputationSnapshots");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SecurityAuditLog", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("ntext");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Exception")
                        .HasColumnType("ntext");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("EventType");

                    b.HasIndex("IpAddress");

                    b.HasIndex("Level");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityAuditLogs");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SecurityEvent", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresAction")
                        .HasColumnType("bit");

                    b.Property<string>("ResolutionNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolvedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventType");

                    b.HasIndex("IpAddress");

                    b.HasIndex("IsResolved");

                    b.HasIndex("RequiresAction");

                    b.HasIndex("Severity");

                    b.HasIndex("UserId");

                    b.HasIndex("IpAddress", "EventType");

                    b.HasIndex("IsResolved", "RequiresAction");

                    b.HasIndex("Severity", "IsResolved");

                    b.HasIndex("UserId", "EventType");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Substack", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AvgCommentLength")
                        .HasColumnType("int");

                    b.Property<double>("AvgMeritScore")
                        .HasColumnType("float");

                    b.Property<int>("AvgPostLength")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomDomain")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EngagementRate")
                        .HasColumnType("int");

                    b.Property<int>("FollowerCount")
                        .HasColumnType("int");

                    b.Property<double>("GrowthRate")
                        .HasColumnType("float");

                    b.Property<int>("ImportedPostCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastPostDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<int>("PostsLastMonth")
                        .HasColumnType("int");

                    b.Property<int>("PostsLastWeek")
                        .HasColumnType("int");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalComments")
                        .HasColumnType("int");

                    b.Property<int>("TotalRemixes")
                        .HasColumnType("int");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.Property<string>("TwitterHandle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UniqueViewers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UlidId");

                    b.HasIndex("AuthorName");

                    b.HasIndex("AvgMeritScore");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomDomain");

                    b.HasIndex("EngagementRate");

                    b.HasIndex("IsVerified");

                    b.HasIndex("LastPostDate");

                    b.HasIndex("Subdomain")
                        .IsUnique();

                    b.HasIndex("IsVerified", "AvgMeritScore");

                    b.HasIndex("IsVerified", "EngagementRate");

                    b.HasIndex("LastPostDate", "EngagementRate");

                    b.ToTable("Substacks");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SubstackFollower", b =>
                {
                    b.Property<string>("SubstackId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubstackId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SubstackFollowers", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Tag", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FollowerCount")
                        .HasColumnType("int");

                    b.Property<decimal>("MeritThreshold")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentTagId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentTagId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("UseCount");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagRelationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedById")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ChildTagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBidirectional")
                        .HasColumnType("bit");

                    b.Property<string>("ParentTagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedTagId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceTagId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<decimal>("Strength")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsApproved");

                    b.HasIndex("RelatedTagId");

                    b.HasIndex("Strength");

                    b.HasIndex("SourceTagId", "RelatedTagId", "RelationType")
                        .IsUnique();

                    b.ToTable("TagRelationships");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagSynonym", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedById")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("SourceTagId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetTagId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsApproved");

                    b.HasIndex("SourceTagId");

                    b.HasIndex("TargetTagId");

                    b.ToTable("TagSynonyms");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagWiki", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedById")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EditorId");

                    b.HasIndex("IsApproved");

                    b.HasIndex("TagId", "VersionNumber")
                        .IsUnique();

                    b.ToTable("TagWikis");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailNotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCalculated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MeritScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("PreferredTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserSession", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("LastActivityAt");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.ContentSimilarity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentId2")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SimilarityScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedAt");

                    b.HasIndex("SimilarityScore");

                    b.HasIndex("ContentId1", "ContentId2")
                        .IsUnique();

                    b.ToTable("ContentSimilarity", t =>
                        {
                            t.HasCheckConstraint("CK_ContentSimilarity_IdOrder", "ContentId1 < ContentId2");
                        });
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.ContentTopic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExtractedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Relevance")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExtractedAt");

                    b.HasIndex("Topic");

                    b.HasIndex("ContentId", "ContentType");

                    b.ToTable("ContentTopics");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.TrendingContent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AverageMeritScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InteractionCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TrendingScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("WindowEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WindowStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrendingScore");

                    b.HasIndex("ContentId", "ContentType")
                        .IsUnique();

                    b.HasIndex("WindowStart", "WindowEnd");

                    b.ToTable("TrendingContents");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.UserContentInteraction", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngagementScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("InteractedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("InteractionType");

                    b.HasIndex("UserId", "InteractedAt");

                    b.HasIndex("ContentId", "ContentType", "InteractedAt");

                    b.ToTable("UserContentInteractions");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.UserTopicPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UlidId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdated");

                    b.HasIndex("UserId", "Topic")
                        .IsUnique();

                    b.ToTable("UserTopicPreferences");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Versioning.ContentDiff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComponentDiffs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentVersionId")
                        .IsRequired()
                        .HasColumnType("varchar(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiffData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MeritScoreDiff")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TitleDiff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentVersionId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("ContentDiff");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<string>("PostsUlidId")
                        .HasColumnType("varchar(26)");

                    b.Property<string>("TagsUlidId")
                        .HasColumnType("varchar(26)");

                    b.HasKey("PostsUlidId", "TagsUlidId");

                    b.HasIndex("TagsUlidId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("SubstackUser", b =>
                {
                    b.Property<string>("FollowedSubstacksUlidId")
                        .HasColumnType("varchar(26)");

                    b.Property<string>("FollowersId")
                        .HasColumnType("varchar(26)");

                    b.HasKey("FollowedSubstacksUlidId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("SubstackUser");
                });

            modelBuilder.Entity("UserReputationMetrics", b =>
                {
                    b.Property<string>("UlidId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.Property<string>("BadgeProgress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryScores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CommunityImpact")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ContentQualityAverage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ContributionCounts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NegativeInteractions")
                        .HasColumnType("int");

                    b.Property<decimal>("OverallMeritScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PositiveInteractions")
                        .HasColumnType("int");

                    b.Property<string>("TopicExpertise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalContributions")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("varchar(26)");

                    b.HasKey("UlidId");

                    b.HasIndex("Level");

                    b.HasIndex("OverallMeritScore");

                    b.HasIndex("TotalContributions");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserReputationMetrics");
                });

            modelBuilder.Entity("ContentTopicSubstack", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Substack", null)
                        .WithMany()
                        .HasForeignKey("SubstacksUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Features.Recommendations.Models.ContentTopic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.AdminActionLog", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ApiUsageLog", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.BlockedIpAddress", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "BlockedByUser")
                        .WithMany()
                        .HasForeignKey("BlockedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BlockedByUser");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Comment", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentModerationEvent", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.ModerationAction", "Action")
                        .WithOne("ModerationEvent")
                        .HasForeignKey("Meritocious.Core.Entities.ContentModerationEvent", "ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentReport", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentSimilarity", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "Content1")
                        .WithMany()
                        .HasForeignKey("Content1UlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Post", "Content2")
                        .WithMany()
                        .HasForeignKey("Content2UlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content1");

                    b.Navigation("Content2");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ContentVersion", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Post", null)
                        .WithMany("Versions")
                        .HasForeignKey("PostUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ExternalLogin", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScore", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", null)
                        .WithMany("MeritScores")
                        .HasForeignKey("ContentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.MeritScoreType", "ScoreType")
                        .WithMany("Scores")
                        .HasForeignKey("ScoreTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScoreType");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScoreHistory", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", null)
                        .WithMany("MeritScoreHistories")
                        .HasForeignKey("ContentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany("MeritScoreHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationAction", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Moderator");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationActionEffect", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.ModerationAction", "ModerationAction")
                        .WithMany("Effects")
                        .HasForeignKey("ModerationActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModerationAction");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationAppeal", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Appealer")
                        .WithMany()
                        .HasForeignKey("AppealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.ModerationAction", "ModerationAction")
                        .WithMany()
                        .HasForeignKey("ModerationActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Appealer");

                    b.Navigation("ModerationAction");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Note", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "Post")
                        .WithMany("Notes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Notification", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Post", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Post", "ParentPost")
                        .WithMany()
                        .HasForeignKey("ParentPostUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Substack", "Substack")
                        .WithMany("Posts")
                        .HasForeignKey("SubstackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentPost");

                    b.Navigation("Substack");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostEngagement", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostRelation", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "Child")
                        .WithMany("ParentRelations")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Post", "Parent")
                        .WithMany("ChildRelations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostTag", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.QuoteLocation", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", "PostSource")
                        .WithMany()
                        .HasForeignKey("PostSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.PostRelation", "PostRelation")
                        .WithMany("Quotes")
                        .HasForeignKey("PostRelationParentId", "PostRelationChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PostRelation");

                    b.Navigation("PostSource");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ReputationBadge", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ReputationSnapshot", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.RoleClaim", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SecurityAuditLog", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SecurityEvent", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.SubstackFollower", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Substack", "Substack")
                        .WithMany()
                        .HasForeignKey("SubstackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Tag", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Tag", "ParentTag")
                        .WithMany("ChildTags")
                        .HasForeignKey("ParentTagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany("FollowedTags")
                        .HasForeignKey("UserId");

                    b.Navigation("ParentTag");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagRelationship", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "RelatedTag")
                        .WithMany()
                        .HasForeignKey("RelatedTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "SourceTag")
                        .WithMany("RelatedTags")
                        .HasForeignKey("SourceTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Creator");

                    b.Navigation("RelatedTag");

                    b.Navigation("SourceTag");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagSynonym", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "SourceTag")
                        .WithMany("Synonyms")
                        .HasForeignKey("SourceTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "TargetTag")
                        .WithMany()
                        .HasForeignKey("TargetTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("SourceTag");

                    b.Navigation("TargetTag");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.TagWiki", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meritocious.Core.Entities.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", "Tag")
                        .WithMany("WikiVersions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Editor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserClaim", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserLogin", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserSession", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.UserToken", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.UserContentInteraction", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Recommendations.Models.UserTopicPreference", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Features.Versioning.ContentDiff", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.ContentVersion", "ContentVersion")
                        .WithMany()
                        .HasForeignKey("ContentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentVersion");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubstackUser", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.Substack", null)
                        .WithMany()
                        .HasForeignKey("FollowedSubstacksUlidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meritocious.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserReputationMetrics", b =>
                {
                    b.HasOne("Meritocious.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.MeritScoreType", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.ModerationAction", b =>
                {
                    b.Navigation("Effects");

                    b.Navigation("ModerationEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Post", b =>
                {
                    b.Navigation("ChildRelations");

                    b.Navigation("Comments");

                    b.Navigation("MeritScoreHistories");

                    b.Navigation("MeritScores");

                    b.Navigation("Notes");

                    b.Navigation("ParentRelations");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.PostRelation", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Substack", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.Tag", b =>
                {
                    b.Navigation("ChildTags");

                    b.Navigation("RelatedTags");

                    b.Navigation("Synonyms");

                    b.Navigation("WikiVersions");
                });

            modelBuilder.Entity("Meritocious.Core.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowedTags");

                    b.Navigation("MeritScoreHistories");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
